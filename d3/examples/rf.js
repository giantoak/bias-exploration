// Generated by CoffeeScript 1.3.3
var cells, chr, height, hilit, log2, lwidth, margin, markers, matrix, onedigit, reverselabels, rf, rwidth, svg, twodigits, xscale, yscale, zmax, zscale;

margin = {
  top: 25,
  right: 25,
  bottom: 10,
  left: 50
};

lwidth = 720;

height = 720;

rwidth = 400;

zmax = 12;

log2 = function(x) {
  return Math.log(x) / Math.log(2.0);
};

onedigit = d3.format(".1f");

twodigits = d3.format(".2f");

reverselabels = function(label) {
  var rc, tmp;
  rc = label.split("c");
  tmp = rc[0].split("r");
  return ["r", rc[1], "c", tmp[1]].join("");
};

rf = [];

chr = [];

markers = [];

cells = [];

xscale = [];

yscale = [];

zscale = [];

matrix = [];

hilit = [];

svg = d3.select("body").selectAll("#rf").append("svg").attr("width", lwidth + 2 * margin.left + 2 * margin.right + rwidth).attr("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.json("../recfrac/rf.json", function(rfdata) {
  var addInfobox, click, i, infobox, mouseout, mouseover, nchr, nmar, rbheight, rtheight, temp, xrscale, yrbscale, yrtscale, _i;
  markers = rfdata.markers;
  nmar = markers.length;
  chr = rfdata.chr;
  nchr = chr.length;
  rf = rfdata.rf;
  xscale = d3.scale.ordinal().domain(d3.range(nmar)).rangeBands([0, lwidth]);
  yscale = d3.scale.ordinal().domain(d3.range(nmar)).rangeBands([height, 0]);
  zscale = d3.scale.linear().domain([-1, 0, zmax]).range(["orange", "white", "blue"]);
  for (i = _i = 0; 0 <= nmar ? _i < nmar : _i > nmar; i = 0 <= nmar ? ++_i : --_i) {
    matrix[i] = d3.range(nmar).map(function(j) {
      return {
        rf: null,
        lod: null
      };
    });
  }
  rf.forEach(function(cell) {
    if (cell.row > cell.col) {
      matrix[cell.row][cell.col].rf = cell.value;
      return matrix[cell.col][cell.row].rf = cell.value;
    } else if (cell.row < cell.col) {
      matrix[cell.row][cell.col].lod = cell.value;
      return matrix[cell.col][cell.row].lod = cell.value;
    }
  });
  rf.forEach(function(cell) {
    if (cell.value === null) {
      return cell.value = -1;
    }
  });
  rf.forEach(function(cell) {
    cell.state = 0;
    if (cell.value === null) {
      if (cell.row < cell.col) {
        cell.value = 0.5;
      }
      if (cell.row > cell.col) {
        cell.value = 0;
      }
    }
    if (cell.row === cell.col) {
      cell.value = zmax;
    } else if (cell.row > cell.col) {
      if (cell.value !== -1) {
        if (cell.value > 0.5) {
          cell.value = 0.5;
        }
        cell.value = -4 * (log2(cell.value) + 1) / 12 * zmax;
      }
    }
    if (cell.value > zmax) {
      return cell.value = zmax;
    }
  });
  cells = svg.selectAll(".cell").data(rf).enter().append("rect").attr("class", "cell").attr("x", function(d) {
    return xscale(d.row);
  }).attr("y", function(d) {
    return yscale(d.col);
  }).attr("width", xscale.rangeBand()).attr("height", yscale.rangeBand()).attr("id", function(d) {
    return "r" + d.row + "c" + d.col;
  }).style("fill", function(d) {
    return zscale(d.value);
  });
  temp = lwidth + margin.left + margin.right;
  xrscale = d3.scale.linear().domain([0, 100]).range([temp, temp + rwidth]);
  rtheight = (height - margin.top - margin.bottom) * 0.4;
  rbheight = (height - margin.top - margin.bottom) - rtheight;
  yrtscale = d3.scale.linear().domain([0, 100]).range([rtheight, 0]);
  temp = rtheight + margin.top + margin.bottom;
  yrbscale = d3.scale.linear().domain([0, 100]).range([rbheight + temp, temp]);
  cells.on("mouseover", function(d) {
    return mouseover(d);
  });
  mouseover = function(d) {
    hilit = [svg.append("rect").attr("id", "hilit").attr("x", xscale(d.col) - 2).attr("y", yscale(d.row) - 2).attr("width", xscale.rangeBand() + 4).attr("height", yscale.rangeBand() + 4).style("fill", "none").style("stroke", "red").style("stroke-width", "3"), svg.append("rect").attr("id", "hilit").attr("x", xscale(d.row) - 2).attr("y", yscale(d.col) - 2).attr("width", xscale.rangeBand() + 4).attr("height", yscale.rangeBand() + 4).style("fill", "none").style("stroke", "green").style("stroke-width", "3")];
    return addInfobox(d);
  };
  infobox = [];
  addInfobox = function(d) {
    infobox = svg.append("g").attr("id", "infobox");
    infobox.append("text").attr("x", xrscale(45)).attr("y", yrtscale(65)).text(markers[d.row].marker).attr("text-anchor", "end");
    infobox.append("text").attr("x", xrscale(50)).attr("y", yrtscale(65)).text(":").attr("text-anchor", "middle");
    infobox.append("text").attr("x", xrscale(55)).attr("y", yrtscale(65)).text(markers[d.col].marker).attr("text-anchor", "start");
    infobox.append("text").attr("x", xrscale(50)).attr("y", yrtscale(45)).text("rec frac = " + (twodigits(matrix[d.row][d.col].rf))).attr("text-anchor", "middle");
    return infobox.append("text").attr("x", xrscale(50)).attr("y", yrtscale(30)).text("LOD score = " + (onedigit(matrix[d.row][d.col].lod))).attr("text-anchor", "middle");
  };
  cells.on("mouseout", function() {
    return mouseout();
  });
  mouseout = function() {
    infobox.remove();
    d3.selectAll("#tooltip").remove();
    hilit[0].remove();
    return hilit[1].remove();
  };
  click = function(d) {
    svg.append("text").text(function() {
      if (d.row === d.col) {
        return markers[d.row].marker;
      } else {
        return "" + markers[d.row].marker + " : " + markers[d.col].marker;
      }
    }).attr("id", "tooltip").style("font-family", "sans-serif").attr("text-anchor", function() {
      if (d.row < nmar / 2) {
        return "start";
      } else {
        return "end";
      }
    }).attr("x", function() {
      if (d.row < nmar / 2) {
        return xscale(d.row) + xscale.rangeBand() * 1.5;
      } else {
        return xscale(d.row) - xscale.rangeBand() / 2;
      }
    }).attr("y", yscale(d.col) + yscale.rangeBand());
    if (d.row !== d.col) {
      return svg.append("text").text(function() {
        return "rf = " + (twodigits(matrix[d.row][d.col].rf)) + "    lod = " + (onedigit(matrix[d.row][d.col].lod));
      }).attr("id", "tooltip").style("font-family", "sans-serif").attr("text-anchor", function() {
        if (d.col < nmar / 2) {
          return "start";
        } else {
          return "end";
        }
      }).attr("x", function() {
        if (d.col < nmar / 2) {
          return xscale(d.col) + xscale.rangeBand() * 1.5;
        } else {
          return xscale(d.col) - xscale.rangeBand() / 2;
        }
      }).attr("y", yscale(d.row) + yscale.rangeBand());
    }
  };
  svg.append("rect").attr("class", "border").attr("width", lwidth).attr("height", height);
  svg.append("rect").attr("class", "border").attr("x", xrscale(0)).attr("y", yrtscale(100)).attr("width", rwidth).attr("height", rtheight);
  svg.append("rect").attr("class", "border").attr("x", xrscale(0)).attr("y", yrbscale(100)).attr("width", rwidth).attr("height", rbheight);
  svg.selectAll("#hchr").data(chr).enter().append("line").attr("class", "border").attr("id", "hchr").attr("x1", function(d) {
    return 0;
  }).attr("x2", function(d) {
    return lwidth;
  }).attr("y1", function(d) {
    return yscale(d.hi);
  }).attr("y2", function(d) {
    return yscale(d.hi);
  });
  svg.selectAll("#vchr").data(chr).enter().append("line").attr("class", "border").attr("id", "vchr").attr("x1", function(d) {
    return xscale(d.hi + 1);
  }).attr("x2", function(d) {
    return xscale(d.hi + 1);
  }).attr("y1", function(d) {
    return 0;
  }).attr("y2", function(d) {
    return height;
  });
  svg.selectAll("#xlab").data(chr).enter().append("text").attr("class", "axis").attr("id", "xlab").attr("x", function(d) {
    return (xscale(d.lo) + xscale(d.hi) + xscale.rangeBand()) / 2;
  }).attr("y", -margin.top * 0.4).attr("text-anchor", "middle").text(function(d) {
    return d.chr;
  });
  return svg.selectAll("#ylab").data(chr).enter().append("text").attr("class", "axis").attr("id", "ylab").attr("y", function(d) {
    return (yscale(d.hi) + yscale(d.lo)) / 2 + yscale.rangeBand();
  }).attr("x", lwidth + margin.right * 0.4).attr("text-anchor", "middle").text(function(d) {
    return d.chr;
  });
});
